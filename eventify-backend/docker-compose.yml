version: "2"

services:
  postgres:
    container_name: postgres
    image: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: changeme
      POSTGRES_DB: eventify
      PGDATA: /data/postgres
    volumes:
       - postgres:/data/postgres
    ports:
      - "5432:5432"
    networks:
      - event-network
    restart: unless-stopped
  
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: pgadmin4@pgadmin.org
      PGADMIN_DEFAULT_PASSWORD: admin
    volumes:
       - pgadmin:/root/.pgadmin
    ports:
      - "5050:80"
    networks:
      - event-network
    restart: unless-stopped

  zookeeper:
    container_name: zookeper
    image: wurstmeister/zookeeper:3.4.6
    ports:
    - "2181:2181"
    networks:
      - event-network
  kafka:
    container_name: kafka
    build:
      context: .
      dockerfile: kafka.Dockerfile
    image: kafka-service
    ports:
        - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:9093,OUTSIDE://localhost:9092
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_CREATE_TOPICS: "cqrs:1:1,cqrs1:1:1"
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
    networks:
      - event-network

  eureka:
    container_name: eureka
    build:
      context: .
      dockerfile: eureka.Dockerfile
    image: eureka-service
    ports: 
      - "8761:8761"
    networks:
      - event-network

  zuul:
    container_name: zuul
    build:
      context: .
      dockerfile: zuul.Dockerfile
    image: zuul-service
    ports: 
      - "8762:8762"
    networks:
      - event-network

  event:
    container_name: event
    build:
      context: .
      dockerfile: event.Dockerfile
    image: event-service
    ports: 
      - "8200:8200"
    networks:
      - event-network

  spring-admin:
    container_name: spring-admin
    build:
      context: .
      dockerfile: spring-admin.Dockerfile
    image: spring-admin-service
    ports:
      - "5060:5060"
    networks:
      - event-network

  frontend:
    container_name: frontend
    build:
      context: ../eventify-frontend
      dockerfile: frontend.Dockerfile
    image: frontend
    ports:
      - "8080:3000"
    networks:
      - event-network

  event-web-scraper:
    container_name: event-web-scraper
    build:
      context: .
      dockerfile: event-web-scraper.Dockerfile
    image: event-web-scraper-service
    ports: 
      - "8222:8222"
    networks:
      - event-network

  auth:
    container_name: auth
    build:
      context: .
      dockerfile: auth.Dockerfile
    image: auth-service
    ports: 
      - "9100:9100"
    networks:
      - event-network

networks:
  event-network:
    driver: bridge

volumes:
    postgres:
    pgadmin:
